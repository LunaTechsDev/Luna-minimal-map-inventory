//=============================================================================
// Luna_MinimalMapInventory.js
//=============================================================================
//=============================================================================
// Build Date: 2020-10-15 21:01:19
//=============================================================================
//=============================================================================
// Made with LunaTea -- Haxe
//=============================================================================

// Generated by Haxe 4.1.3
/*:
@author LunaTechs - Kino
@plugindesc A plugin that creates a inventory menu on the map scene<LunaMMI>.

@target MV MZ

@param linkWindows
@text Link Windows
@desc The list of link windows on your title screen.
@type struct<LinkWindow>[]

@param maxPageItems
@text Max Page Items
@desc The maximum numer of page items
@default 8

@help

A plugin that creates a inventory menu on the map scene<LunaMMI>.

==== How To Use ====



MIT License
Copyright (c) 2020 LunaTechsDev
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/

/*~struct~Empty:
*
* @param link
* @text Link 
* @desc The link for the link window
* @default google.com
*
* @param image
* @text Image Name
* @desc Name of an image in your pictures folder
* @default Actor1_1
*
* @param x
* @text X Position
* @desc The X position of the link window
* @default 0
* 
* @param y
* @text Y Position
* @desc The Y position of the link window
* @default 0
*
* @param width
* @text Width
* @desc The width of the link window
* @default 100
*
* @param height
* @text Height 
* @desc The height of the link window
* @default 100
*
* @param backgroundType
* @text Background Type 0 -> Opaque 1 -> Semitransparent 2 -> Transparent
* @desc The background type of the link window
* @default 2
* 
*/




(function ($hx_exports, $global) { "use strict"
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""))
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0
		}
		this.r.m = this.r.exec(s)
		this.r.s = s
		return this.r.m != null;
	}
}
EReg.__name__ = true
class Game_$Player extends Game_Player {
	constructor() {
		super();
	}
	canMove() {
		if(LunaMMInventory.isInventoryOpen()) {
			return false;
		} else {
			return _Game_Player_canMove.call(this);
		}
	}
}
Game_$Player.__name__ = true
class LunaMMInventory {
	static main() {
		let _g = []
		let _g1 = 0
		let _g2 = $plugins
		while(_g1 < _g2.length) {
			let v = _g2[_g1]
			++_g1
			if(new EReg("<LunaMMI>","ig").match(v.description)) {
				_g.push(v)
			}
		}
		let plugin = _g[0]
		let params = plugin.parameters
		LunaMMInventory.Params = { maxPageItems : parseInt(params["maxPageItems"],10)}
		haxe_Log.trace(LunaMMInventory.Params,{ fileName : "src/Main.hx", lineNumber : 35, className : "Main", methodName : "main"})
		
//=============================================================================
// Scene_Map
//=============================================================================
      
		let _Scene_Map__lmmInventoryWindow = Scene_Map.prototype._lmmInventoryWindow
		Scene_Map.prototype._lmmInventoryWindow = null
		let _Scene_Map__lmmInventoryHelpWindow = Scene_Map.prototype._lmmInventoryHelpWindow
		Scene_Map.prototype._lmmInventoryHelpWindow = null
		let _Scene_Map__lmmInventoryConfirmWindow = Scene_Map.prototype._lmmInventoryConfirmWindow
		Scene_Map.prototype._lmmInventoryConfirmWindow = null
		let _Scene_Map_createAllWindows = Scene_Map.prototype.createAllWindows
		Scene_Map.prototype.createAllWindows = function() {
			_Scene_Map_createAllWindows.call(this)
			this.createMapInvWindow()
			this.createMapInvHelpWindow()
			this.createMapInvConfirmWindow()
			this.setupMMInventoryEvents()
		}
		let _Scene_Map_createMapInvWindow = Scene_Map.prototype.createMapInvWindow
		Scene_Map.prototype.createMapInvWindow = function() {
			let centerX = Graphics.width / 2
			haxe_Log.trace(centerX,{ fileName : "src/Scene_Map.hx", lineNumber : 32, className : "Scene_Map", methodName : "createMapInvWindow"})
			let width = 400
			this._lmmInventoryWindow = new WindowMapInventory(centerX - width / 2,300,width,75)
			this.addWindow(this._lmmInventoryWindow)
			this._lmmInventoryWindow.hide()
		}
		let _Scene_Map_createMapInvHelpWindow = Scene_Map.prototype.createMapInvHelpWindow
		Scene_Map.prototype.createMapInvHelpWindow = function() {
			this._lmmInventoryHelpWindow = new WindowMapInvHelp(0,0,200,200)
			this.addWindow(this._lmmInventoryHelpWindow)
			this._lmmInventoryHelpWindow.hide()
		}
		let _Scene_Map_createMapInvConfirmWindow = Scene_Map.prototype.createMapInvConfirmWindow
		Scene_Map.prototype.createMapInvConfirmWindow = function() {
			this._lmmInventoryConfirmWindow = new WindowMapInvConfirm(0,0,200,200)
			this.setConfirmWindowHandlers()
			this.addWindow(this._lmmInventoryConfirmWindow)
			this._lmmInventoryConfirmWindow.hide()
		}
		let _Scene_Map_setConfirmWindowHandlers = Scene_Map.prototype.setConfirmWindowHandlers
		Scene_Map.prototype.setConfirmWindowHandlers = function() {
			this._lmmInventoryConfirmWindow.setHandler("yes",$bind(this,this.confirmItemUse))
			this._lmmInventoryConfirmWindow.setHandler("no",$bind(this,this.cancelItemUse))
		}
		let _Scene_Map_confirmItemUse = Scene_Map.prototype.confirmItemUse
		Scene_Map.prototype.confirmItemUse = function() {
			let currentItem = this._lmmInventoryWindow.currentItem()
			if(currentItem != null) {
				let _hx_tmp
				if(DataManager.isItem(currentItem) == true) {
					$gameParty.members()[0].useItem(currentItem)
				} else {
					_hx_tmp = DataManager.isArmor(currentItem) || DataManager.isWeapon(currentItem)
					if(_hx_tmp == true) {
						let equipItem = currentItem
						$gameParty.members()[0].changeEquip(equipItem.etypeId,equipItem)
					}
				}
			}
			this.closeConfirmWindow()
		}
		let _Scene_Map_cancelItemUse = Scene_Map.prototype.cancelItemUse
		Scene_Map.prototype.cancelItemUse = function() {
			this.closeConfirmWindow()
		}
		let _Scene_Map_closeConfirmWindow = Scene_Map.prototype.closeConfirmWindow
		Scene_Map.prototype.closeConfirmWindow = function() {
			this._lmmInventoryConfirmWindow.deactivate()
			this._lmmInventoryConfirmWindow.close()
			this._lmmInventoryConfirmWindow.hide()
		}
		let _Scene_Map_update = Scene_Map.prototype.update
		Scene_Map.prototype.update = function() {
			_Scene_Map_update.call(this)
			this.processMMInventory()
		}
		let _Scene_Map_processMMInventory = Scene_Map.prototype.processMMInventory
		Scene_Map.prototype.processMMInventory = function() {
			let item = this._lmmInventoryWindow.currentItem()
			if(item != null) {
				haxe_Log.trace("Found Item",{ fileName : "src/Scene_Map.hx", lineNumber : 97, className : "Scene_Map", methodName : "processMMInventory", customParams : [item.description]})
				this._lmmInventoryHelpWindow.setHelpText(item.description)
				this._lmmInventoryHelpWindow.show()
				this._lmmInventoryHelpWindow.open()
			} else {
				this._lmmInventoryHelpWindow.close()
			}
		}
		let _Scene_Map_setupMMInventoryEvents = Scene_Map.prototype.setupMMInventoryEvents
		Scene_Map.prototype.setupMMInventoryEvents = function() {
			let _gthis = this
			this._lmmInventoryWindow.on("cancelItem",function(_) {
				_gthis._lmmInventoryConfirmWindow.close()
				_gthis._lmmInventoryHelpWindow.close()
				_gthis._lmmInventoryWindow.close()
			})
			this._lmmInventoryWindow.on("confirmItem",function(item) {
				_gthis._lmmInventoryConfirmWindow.open()
			})
		}
		
//=============================================================================
// Game_Player
//=============================================================================
      
		let _Game_Player_canMove = Game_Player.prototype.canMove
		Game_Player.prototype.canMove = function() {
			if(LunaMMInventory.isInventoryOpen()) {
				return false;
			} else {
				return _Game_Player_canMove.call(this);
			}
		}
	}
	static params() {
		return LunaMMInventory.Params;
	}
	static getAllItems() {
	}
	static isInventoryOpen() {
		let scene = SceneManager._scene
		if(scene.hasOwnProperty("_lmmInventoryWindow")) {
			let win = scene._lmmInventoryWindow
			if(win.isOpen()) {
				return win.visible;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	static openInventory() {
		haxe_Log.trace("Open minimal inventory",{ fileName : "src/Main.hx", lineNumber : 60, className : "Main", methodName : "openInventory"})
		let scene = SceneManager._scene
		if(scene.hasOwnProperty("_lmmInventoryWindow")) {
			scene._lmmInventoryWindow.setItems($gameParty.items())
			scene._lmmInventoryWindow.show()
			scene._lmmInventoryWindow.open()
		}
	}
	static closeInventory() {
		haxe_Log.trace("Close minimal inventory",{ fileName : "src/Main.hx", lineNumber : 71, className : "Main", methodName : "closeInventory"})
		let scene = SceneManager._scene
		if(scene.hasOwnProperty("_lmmInventoryWindow")) {
			scene._lmmInventoryWindow.close()
			scene._lmmInventoryWindow.hide()
		}
	}
}
$hx_exports["LunaMMInventory"] = LunaMMInventory
LunaMMInventory.__name__ = true
Math.__name__ = true
class Scene_$Map extends Scene_Map {
	constructor() {
		super();
	}
	createAllWindows() {
		_Scene_Map_createAllWindows.call(this)
		this.createMapInvWindow()
		this.createMapInvHelpWindow()
		this.createMapInvConfirmWindow()
		this.setupMMInventoryEvents()
	}
	createMapInvWindow() {
		let centerX = Graphics.width / 2
		haxe_Log.trace(centerX,{ fileName : "src/Scene_Map.hx", lineNumber : 32, className : "Scene_Map", methodName : "createMapInvWindow"})
		this._lmmInventoryWindow = new WindowMapInventory(centerX - 200.,300,400,75)
		this.addWindow(this._lmmInventoryWindow)
		this._lmmInventoryWindow.hide()
	}
	createMapInvHelpWindow() {
		this._lmmInventoryHelpWindow = new WindowMapInvHelp(0,0,200,200)
		this.addWindow(this._lmmInventoryHelpWindow)
		this._lmmInventoryHelpWindow.hide()
	}
	createMapInvConfirmWindow() {
		this._lmmInventoryConfirmWindow = new WindowMapInvConfirm(0,0,200,200)
		this.setConfirmWindowHandlers()
		this.addWindow(this._lmmInventoryConfirmWindow)
		this._lmmInventoryConfirmWindow.hide()
	}
	setConfirmWindowHandlers() {
		this._lmmInventoryConfirmWindow.setHandler("yes",$bind(this,this.confirmItemUse))
		this._lmmInventoryConfirmWindow.setHandler("no",$bind(this,this.cancelItemUse))
	}
	confirmItemUse() {
		let currentItem = this._lmmInventoryWindow.currentItem()
		if(currentItem != null) {
			let _hx_tmp
			if(DataManager.isItem(currentItem) == true) {
				$gameParty.members()[0].useItem(currentItem)
			} else {
				_hx_tmp = DataManager.isArmor(currentItem) || DataManager.isWeapon(currentItem)
				if(_hx_tmp == true) {
					let equipItem = currentItem
					$gameParty.members()[0].changeEquip(equipItem.etypeId,equipItem)
				}
			}
		}
		this.closeConfirmWindow()
	}
	cancelItemUse() {
		this.closeConfirmWindow()
	}
	closeConfirmWindow() {
		this._lmmInventoryConfirmWindow.deactivate()
		this._lmmInventoryConfirmWindow.close()
		this._lmmInventoryConfirmWindow.hide()
	}
	processMMInventory() {
		let item = this._lmmInventoryWindow.currentItem()
		if(item != null) {
			haxe_Log.trace("Found Item",{ fileName : "src/Scene_Map.hx", lineNumber : 97, className : "Scene_Map", methodName : "processMMInventory", customParams : [item.description]})
			this._lmmInventoryHelpWindow.setHelpText(item.description)
			this._lmmInventoryHelpWindow.show()
			this._lmmInventoryHelpWindow.open()
		} else {
			this._lmmInventoryHelpWindow.close()
		}
	}
	setupMMInventoryEvents() {
		let _gthis = this
		this._lmmInventoryWindow.on("cancelItem",function(_) {
			_gthis._lmmInventoryConfirmWindow.close()
			_gthis._lmmInventoryHelpWindow.close()
			_gthis._lmmInventoryWindow.close()
		})
		this._lmmInventoryWindow.on("confirmItem",function(item) {
			_gthis._lmmInventoryConfirmWindow.open()
		})
	}
}
Scene_$Map.__name__ = true
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true
class WindowExtensions {
	static canvasToLocal(win,x,y) {
		let touchPos = new PIXI.Point(x,y)
		let localPos = win.worldTransform.applyInverse(touchPos)
		return localPos;
	}
}
WindowExtensions.__name__ = true
class WindowMapInvConfirm extends Window_Command {
	constructor(x,y,width,height) {
		let rect = new Rectangle(x,y,width,height)
		super(rect);
	}
	makeCommandList() {
		super.makeCommandList()
		this.addCommand("Yes","yes",true)
		this.addCommand("No","no",true)
	}
}
$hx_exports["WindowMapInvConfirm"] = WindowMapInvConfirm
WindowMapInvConfirm.__name__ = true
class WindowMapInvHelp extends Window_Base {
	constructor(x,y,width,height) {
		let rect = new Rectangle(x,y,width,height)
		super(rect);
		this._helpText = ""
	}
	setHelpText(text) {
		this._helpText = text
		this.refresh()
	}
	refresh() {
		if(this.contents != null) {
			this.contents.clear()
			this.paintHelpText()
		}
	}
	paintHelpText() {
		this.drawTextEx(this._helpText,0,0,this.contentsWidth())
	}
	update() {
		super.update()
	}
	processVisible() {
		if(this._helpText.length > 0 && !(this.isOpen() || this.visible)) {
			this.show()
			this.open()
		} else {
			this.close()
			this.hide()
		}
	}
}
$hx_exports["WindowMapInvHelp"] = WindowMapInvHelp
WindowMapInvHelp.__name__ = true
class WindowMapInventory extends Window_Base {
	constructor(x,y,width,height) {
		let rect = new Rectangle(x,y,width,height)
		super(rect);
		this._items = []
		this._selectionIndex = -1
		this.page = 0
		this._maxPageItems = LunaMMInventory.Params.maxPageItems
		this.cellWidth = 48
		this.cellHeight = 48
		this.borderSize = 2
		this.horizontalSpacing = 4
		this.setupEvents()
	}
	setupEvents() {
		let _gthis = this
		this.on("selectItem",function(index) {
			_gthis._selectionIndex = index
			let rect = _gthis.itemRectForCell(index)
			_gthis.setCursorRect(rect.x,rect.y,rect.width,rect.height)
		})
	}
	drawIcon(iconIndex,x,y) {
		let bitmap = ImageManager.loadSystem("IconSet")
		let pw = ImageManager.iconWidth
		let ph = ImageManager.iconHeight
		let sx = iconIndex % 16 * pw
		let sy = Math.floor(iconIndex / 16) * ph
		this.contents.blt(bitmap,sx,sy,pw,ph,x,y,this.cellWidth - this.borderSize * 4,this.cellHeight - this.borderSize * 4)
	}
	setItems(items) {
		this._items = items
		this.refresh()
	}
	currentItem() {
		return this._items[this._selectionIndex];
	}
	refresh() {
		if(this.contents != null) {
			haxe_Log.trace("Paint All Items",{ fileName : "src/WindowMapInventory.hx", lineNumber : 92, className : "WindowMapInventory", methodName : "refresh"})
			this.contents.clear()
			this.paintAllItems()
		}
	}
	paintAllItems() {
		let startIndex = this.page * this._maxPageItems
		let endIndex = this.page * this._maxPageItems + this._maxPageItems
		let _g = startIndex
		let _g1 = endIndex - 1
		while(_g < _g1) {
			let index = _g++
			this.paintItem(index)
		}
	}
	paintItem(index) {
		let rect = this.itemRectForCell(index)
		this.paintCell(rect)
		this.paintCellItemIcon(rect,index)
	}
	paintCell(rect) {
		this.contents.fillRect(rect.x,rect.y,rect.width,rect.height,"white")
		this.contents.clearRect(rect.x + this.borderSize,rect.y + this.borderSize,rect.width - this.borderSize * 2,rect.height - this.borderSize * 2)
	}
	paintCellItemIcon(rect,index) {
		let item = this._items[index]
		if(item != null) {
			this.drawIcon(item.iconIndex,rect.x + this.borderSize * 2,rect.y + this.borderSize * 2)
		}
	}
	itemRectForCell(index) {
		let internalIndex = index % this._maxPageItems
		let spacing = this.horizontalSpacing * internalIndex
		let x = this.cellWidth * internalIndex
		let rectangle = new Rectangle(x + spacing,0,this.cellWidth,this.cellHeight)
		return rectangle;
	}
	getCurrentItem(index) {
		let item = null
		item = this._items[this.page * this._maxPageItems + this._selectionIndex]
		return item;
	}
	update() {
		super.update()
		this.processOkAndCancel()
		this.processSelectionOfItemsKeyboard()
		this.processSelectionOfItemMouse()
	}
	processOkAndCancel() {
		let _hx_tmp
		if(Input.isTriggered("ok") == true) {
			this.emit("confirmItem",this.currentItem())
		} else {
			_hx_tmp = Input.isTriggered("cancel")
			if(_hx_tmp == true) {
				this.emit("cancelItem")
			}
		}
	}
	processSelectionOfItemsKeyboard() {
		let _hx_tmp
		if(Input.isTriggered("right") == true) {
			this.emit("selectItem",this._selectionIndex + 1)
		} else {
			_hx_tmp = Input.isTriggered("left") && this._selectionIndex > 0
			if(_hx_tmp == true) {
				this.emit("selectItem",this._selectionIndex - 1)
			}
		}
	}
	processSelectionOfItemMouse() {
		let item = null
		let pos = WindowExtensions.canvasToLocal(this,TouchInput.x,TouchInput.y)
		let _g = 0
		let _g1 = this._maxPageItems
		while(_g < _g1) {
			let index = _g++
			let rect = this.itemRectForCell(index)
			let tmp
			let num = pos.x
			if(num >= rect.x && num <= rect.width + rect.x) {
				let num = pos.y
				tmp = num >= rect.y && num <= rect.height
			} else {
				tmp = false
			}
			if(tmp) {
				item = this._items[this.page * this._maxPageItems + index]
				this.emit("selectItem",index)
			}
		}
		return item;
	}
}
$hx_exports["WindowMapInventory"] = WindowMapInventory
WindowMapInventory.__name__ = true
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v)
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber
		if(infos.customParams != null) {
			let _g = 0
			let _g1 = infos.customParams
			while(_g < _g1.length) {
				let v = _g1[_g]
				++_g
				str += ", " + Std.string(v);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos)
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str)
		}
	}
}
haxe_Log.__name__ = true
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0
		this.array = array
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o)
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object"
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__]
				let n = e.__constructs__[o._hx_index]
				let con = e[n]
				if(con.__params__) {
					s = s + "\t"
					return n + "(" + ((function($this) {
						var $r
						let _g = []
						{
							let _g1 = 0
							let _g2 = con.__params__
							while(true) {
								if(!(_g1 < _g2.length)) {
									break
								}
								let p = _g2[_g1]
								_g1 = _g1 + 1
								_g.push(js_Boot.__string_rec(o[p],s))
							}
						}
						$r = _g
						return $r;
					}(this))).join(",") + ")"
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "["
				s += "\t";
				let _g = 0
				let _g1 = o.length
				while(_g < _g1) {
					let i = _g++
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr
			try {
				tostr = o.toString
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString()
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n"
			s += "\t";
			let hasp = o.hasOwnProperty != null
			let k = null
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1)
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true
class _$LTGlobals_$ {
}
_$LTGlobals_$.__name__ = true
class utils_Fn {
	static proto(obj) {
		return obj.prototype;
	}
	static updateProto(obj,fn) {
		return (fn)(obj.prototype);
	}
	static updateEntity(obj,fn) {
		return (fn)(obj);
	}
}
utils_Fn.__name__ = true
var $_
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0
String.__name__ = true
Array.__name__ = true
js_Boot.__toStr = ({ }).toString
LunaMMInventory.listener = new PIXI.utils.EventEmitter()
LunaMMInventory.main()
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this)

//# sourceMappingURL=Luna_MinimalMapInventory.js.map